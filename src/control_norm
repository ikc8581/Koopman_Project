#!/usr/bin/env python


import rospy

from 

from geometry_msgs.msg import Twist, Vector3, Quaternion
from gazebo_msgs.msg import LinkStates
from tf_conversions import transformations
"""
Node publishes a cmd_vel command to balance the pole
Publishers:
    cmd_vel is of type geometry_msgs/Twist


Subscribers:
    gazebo/link_states
    
"""


class Control():
    def __init__(self):
        self.link_angle = Quaternion()
        self.link_angle_rpy = Vector3()
        self.timer = rospy.Timer(rospy.Duration(0.1),self.timer_callback)
        self.cmd_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.link_sub = rospy.Subscriber('gazebo/link_states', LinkStates, self.link_state_callback)
        
    
    def timer_callback(self,event):
        pass
        
    def link_state_callback(self,data):
        self.link_angle = data.pose[5].orientation
        angle_quat = [data.pose[5].orientation.x, data.pose[5].orientation.y, data.pose[5].orientation.z, data.pose[5].orientation.w]
        r, p, y = transformations.euler_from_quaternion(angle_quat)        
        rospy.loginfo(p)

        
    





def main():
    """
    Main function
    """
    rospy.init_node('control_norm')
    control = Control()
    rospy.spin()

if __name__ == '__main__':
    main()
    
    
    
    
    