#!/usr/bin/env python


import rospy



from nuturtlebot_msgs.msg import SensorData
from nuturtlebot_msgs.msg import WheelCommands
from sensor_msgs.msg import JointState

from geometry_msgs.msg import Twist

from lqr.koop_train import Turtle_Koop, Turtle_Koop_Vel, Turtle_Koop_Poly, Turtle_Koop_Vel_X

from cartpole.msg import Data

class Ground_Turtle():
    def __init__(self):


        self.first = True
        self.dt = rospy.get_param('dt')
        self.encoder_ticks_to_rad = rospy.get_param('encoder_ticks_to_rad')
        self.motor_cmd_to_radsec = rospy.get_param('motor_cmd_to_radsec')
        
        self.ltheta = 0.
        self.rtheta = 0.
        self.x = 0.
        
        self.lvel = 6.05  #3.0303
        self.rvel = 6.05  #3.03     
        
        self.lcmd = 6.05  #3.0303
        self.rcmd = 6.05  #3.0303
        

        self.encoder_sub =  rospy.Subscriber('/sensor_data', SensorData, self.encoder_callback)
        self.x_data_sub =  rospy.Subscriber('/x_data', Data, self.x_data_callback)
        self.cmd_sub = rospy.Subscriber('/wheel_cmd', WheelCommands, self.cmd_callback)
        self.joint_sub = rospy.Subscriber('/blue/joint_states', JointState, self.joint_callback)
        
        self.twist_pub = rospy.Publisher('/cmd_vel', Twist, queue_size = 10)
        self.data_l_pub = rospy.Publisher('/l_data', Data, queue_size=10000)
        self.data_r_pub = rospy.Publisher('/r_data', Data, queue_size=10000)
        self.data_lv_pub = rospy.Publisher('lv_data', Data, queue_size=10000)
        self.data_rv_pub = rospy.Publisher('rv_data', Data, queue_size=10000)


        self.koopman = Turtle_Koop_Vel_X(self.dt, 5, 2, self.x, self.ltheta, self.rtheta, self.lvel, self.rvel, self.lcmd, self.rcmd)


        self.l_first = 0.
        self.r_first = 0.
        
        self.iteration = 0

    def joint_callback(self,data):
        """Get JointState

        Args:
            data (float): turtlebot joint states
        """
        self.lvel = data.velocity[0]
        self.rvel = data.velocity[1]
        
        if self.lvel<1.:
            self.lvel = 6.05 #3.0303
        if self.rvel<1.:
            self.rvel = 6.05  #3.0303
        
        self.data_lv_pub.publish(self.lvel)
        self.data_rv_pub.publish(self.rvel)  
        
        # if self.first == True:
        #     self.l_first = data.position[0]
        #     self.r_first = data.position[1]
        #     self.first = False
        
        self.data_l_pub.publish(data.position[0]-self.l_first)
        self.data_r_pub.publish(data.position[1]-self.r_first)

        
    def encoder_callback(self,data):
        """encoder turtlebot data

        Args:
            data (nuturtlebot_msg): encoder data from turtlebot
        """
        
        t = Twist()
        t.linear.x = 0. #0.22
        t.linear.y = 0.
        t.linear.z = 0.
        
        t.angular.x = 0.
        t.angular.y = 0.
        t.angular.z = 0.
        
        self.twist_pub.publish(t)
        
        self.ltheta_old = self.ltheta
        self.rtheta_old = self.rtheta
        
        self.ltheta = data.left_encoder
        self.rtheta = data.right_encoder   
        
        if self.first == True:
            self.l_first = self.ltheta
            self.r_first = self.rtheta
            self.first = False

        
        self.iteration+=1
                
        self.koopman.train_model(self.x,(self.ltheta - self.l_first)*self.encoder_ticks_to_rad, (self.rtheta - self.r_first)*self.encoder_ticks_to_rad, self.lvel, self.rvel, self.lcmd*self.motor_cmd_to_radsec, self.rcmd*self.motor_cmd_to_radsec)
        self.koopman.calculateK()

        #Train the model in this location

        
        
        
    def x_data_callback(self, data):
        """Camera x position data for robot

        Args:
            data (float): x position in meters
        """

        self.x = data.data
        print('x: ', self.x)
        
    def cmd_callback(self,data):
        """motor command callback

        Args:
            data (WheelCommands): input commands to system
        """
        
        self.lcmd = float(data.left_velocity)
        self.rcmd = float(data.right_velocity)
        
        
        
def main():
    """
    Main function
    """
    rospy.init_node('ground_turtle')
    control = Ground_Turtle()
    rospy.spin()

if __name__ == '__main__':
    main()